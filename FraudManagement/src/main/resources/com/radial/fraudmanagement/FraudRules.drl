package com.radial.fraudmanagement;

import com.radial.fraudmanagement.IPAddress;
import com.radial.fraudmanagement.Order;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

function boolean isNullIP(IPAddress ip) {
    boolean status=false;
    if(null == ip || null == ip.countryName || null == ip.countryName.code) {
        status=true;
    }
    return status;
}

function boolean isNullBilling(Order pOrder) {
    boolean status=false;
    if(null == pOrder || null == pOrder.totalCost || null == pOrder.totalCost.address ||
        null == pOrder.totalCost.address.countryName || null == pOrder.totalCost.address.countryName.code) {
        status=true;
    }
    return status;
}

function boolean billingCountryUS(Order pOrder) {
    boolean status=isNullBilling(pOrder);
    if(!status && "US".equalsIgnoreCase(pOrder.totalCost.address.countryName.code)) {
        status=true;
    }
    return status;
}

function boolean isBNLowerCase(Order pOrder) {
    boolean status=false;
    if(null == pOrder || null == pOrder.totalCost || null == pOrder.totalCost.personName ||
        null == pOrder.totalCost.personName.givenName || null == pOrder.totalCost.personName.surname) {
        status=true;
    } else {
        String firstName=pOrder.totalCost.personName.givenName;
        String lastName=pOrder.totalCost.personName.surname;
        if(!isLowerCase(firstName) || !isLowerCase(lastName)) {
            status=true;
        }
    }
    return status;
}

function boolean isLowerCase(String name) {
    return name.equals(name.toLowerCase());
}

function boolean validateEmail(String email) {
    String regex = "^(.+)@(.+)$";
    Pattern pattern = Pattern.compile(regex);
    Matcher matcher = pattern.matcher(email);
    boolean status = false;
    if(matcher.matches()) {
        String firstPart = matcher.group(1);
        String lastPart = matcher.group(2);
        if("radial.com".equalsIgnoreCase(lastPart) || "radial.org".equalsIgnoreCase(lastPart)) {
            status=true;
        }
    }
    return status;
}

function boolean containsCaseInsensitive(String productName) {
    if(productName.toLowerCase().contains("tricycle")) {
        return true;
    }
    return false;                       
}


rule "Rule1 NullIP"
	dialect "java"
	when
		fraud:Fraud(null != Fraud.fraudRequest, isNullIP(Fraud.fraudRequest.ipAddress))
	then
	    AuditTrail trail = new AuditTrail();
	    trail.setScore(100);
	    trail.setRule("Rule1 NullIP");
	    trail.setAction("None");
	    trail.setNotes("Null IP, rule should not fire");
	    fraud.getAudit().getAuditTrail().add(trail);
	    System.out.println("score:::"+ fraud.getAudit().getTotalScore());
		insert( fraud );
end

rule "Rule1 NullBC"
	dialect "java"
	when
		fraud:Fraud(null != Fraud.fraudRequest, isNullBilling(Fraud.fraudRequest.order))
	then
	    AuditTrail trail = new AuditTrail();
	    trail.setScore(100);
	    trail.setRule("Rule1 NullBC");
	    trail.setAction("None");
	    trail.setNotes("Null BillingCountry, rule should not fire");
	    fraud.getAudit().getAuditTrail().add(trail);
	    System.out.println("score:::"+ fraud.getAudit().getTotalScore());
		insert( fraud );
end

rule "Rule1 BillingNameLowerCase"
	dialect "java"
	when
		fraud:Fraud(null != Fraud.fraudRequest, isBNLowerCase(Fraud.fraudRequest.order))
	then
	    AuditTrail trail = new AuditTrail();
	    trail.setScore(100);
	    trail.setRule("Rule1 BillingNameLowerCase");
	    trail.setAction("None");
	    trail.setNotes("BillingName not in lower case, rule should not fire");
	    fraud.getAudit().getAuditTrail().add(trail);
	    System.out.println("score:::"+ fraud.getAudit().getTotalScore());
		insert( fraud );
end

rule "Rule1 BillingCountryUS"
	dialect "java"
	when
		fraud:Fraud(null != Fraud.fraudRequest, billingCountryUS(Fraud.fraudRequest.order))
	then
	    AuditTrail trail = new AuditTrail();
	    trail.setScore(100);
	    trail.setRule("Rule1 BillingCountryUS");
	    trail.setAction("None");
	    trail.setNotes("Country = US, rule should not fire");
	    fraud.getAudit().getAuditTrail().add(trail);
	    System.out.println("score:::"+ fraud.getAudit().getTotalScore());
		insert( fraud );
end